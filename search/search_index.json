{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This project aims to provide a tool that interconnects common cryptographic interfaces, e.g., PKCS#11, or FIDO2, with threshold platforms, e.g., MeeSign. Such interconnection results in highly customizable threshold authentication in originally intended single-party authentication environments.</p> <p>Get started</p>"},{"location":"Debian-Repository/","title":"Debian Repository","text":"<p>This project uses a packagecloud Debian repository to distribute the MPC Bridge packages. The repository is located at packagecloud.io/kristian_mika/mpc-bridge.</p>"},{"location":"Debian-Repository/#setup","title":"Setup","text":"<ol> <li> <p>Add the repository GPG key</p> <pre><code>curl -fsSL https://packagecloud.io/kristian_mika/mpc-bridge/gpgkey | gpg --dearmor &gt; /etc/apt/keyrings/kristian_mika_mpc-bridge-archive-keyring.gpg\n</code></pre> </li> <li> <p>Add the Debian repository</p> <pre><code>cat &lt;&lt;EOT &gt;&gt; /etc/apt/sources.list.d/kristian_mika_mpc-bridge.list\ndeb [signed-by=/etc/apt/keyrings/kristian_mika_mpc-bridge-archive-keyring.gpg] https://packagecloud.io/kristian_mika/mpc-bridge/ubuntu trusty main\ndeb-src [signed-by=/etc/apt/keyrings/kristian_mika_mpc-bridge-archive-keyring.gpg] https://packagecloud.io/kristian_mika/mpc-bridge/ubuntu trusty main\nEOT\n</code></pre> </li> <li> <p>(Alternatively, at your own risk) Run the following script provided by packagecloud as a quick substitude for the previous steps.</p> <pre><code>curl -s https://packagecloud.io/install/repositories/kristian_mika/mpc-bridge/script.deb.sh?any=true | sudo bash\n</code></pre> </li> <li> <p>Update APT caches and install</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install &lt;mpc bridge component&gt;\n</code></pre> </li> <li> <p>(Alternatively) You can also download the packages from the release page, or the packagecloud repository page using your browser.</p> </li> </ol>"},{"location":"devcontainer/","title":"Devcontainer","text":"<p>The devcontainer folders located in project repositories contain a configuration of a development Docker environment for the particular projects.</p>"},{"location":"devcontainer/#usage","title":"Usage","text":"<ol> <li>Install the <code>ms-vscode-remote.remote-containers</code> VS Code extension.</li> <li>Press Ctrl+Shift+P, select<code>&gt;Dev Containers: Open folder in Container...</code>, and select the root repository directory. (this may take some time for the the first run)</li> </ol>"},{"location":"quickstart/","title":"Getting Started","text":"<p>This project can be tested using a Vagrant configuration provided in bridge-box. The configuration creates a ubuntu machine and install all the tools.</p>"},{"location":"quickstart/#requirements","title":"Requirements","text":"<ol> <li> <p>Install Vagrant and Ansible</p> </li> <li> <p>Install Ansible community plugins.</p> <pre><code>ansible-galaxy collection install community.general community.docker\n</code></pre> </li> </ol>"},{"location":"quickstart/#usage","title":"Usage","text":"<ul> <li> <p>Start the machine</p> <pre><code>vagrant up\n</code></pre> </li> <li> <p>Turn off the machine</p> <pre><code>vagrant halt\n</code></pre> </li> <li> <p>Resume the suspended machine</p> <pre><code>vagrant resume\n</code></pre> </li> <li> <p>Destroy the setup</p> <pre><code>vagrant destroy\n</code></pre> </li> </ul>"},{"location":"quickstart/#using-sshsftp","title":"Using SSH/SFTP","text":"<pre><code>vagrant ssh-config &gt; vagrant-ssh-config.txt\nssh -F vagrant-ssh-config.txt bridge-box\n</code></pre>"},{"location":"quickstart/#testing","title":"Testing","text":""},{"location":"quickstart/#meesign-setup","title":"MeeSign Setup","text":"<ul> <li>upon the server launch, MeeSign server should be already running</li> <li>there are 2 folders present on the desktop <code>meesign_client_*</code></li> <li>to run MeeSign client applications, navigate to these directories and run the binary present in the folders. You can select the <code>localhost</code> server, or the <code>meesign.crocs.fi.muni.cz</code> server (works only from within the FI network)</li> <li>to use multiple clients, you can simply replicate the directories (just make sure to delete the client state - the <code>app</code> directory)</li> </ul>"},{"location":"quickstart/#cryptoki-bridge-setup","title":"Cryptoki Bridge Setup","text":"<ul> <li>using the start menu, search for <code>bridge-controller</code> and run it</li> </ul> <p>Note</p> <p>Controller certificate is in <code>~/Desktop/meesign-server/keys/meesign-ca-cert.pem</code></p> <ul> <li>the controller can be used to launch the interfaces</li> </ul> <p>Note</p> <p>WebAuthn and U2F must be tested using the provided chrome browser</p> <ul> <li>an icon will appear in the trace menu. To display the window, right-click on the icon and select <code>Show</code></li> <li>alternativelly, you can test the interfaces individually: softfido binary is located in <code>/usr/bin/softfido</code>, and cryptoki-bridge is located in <code>/usr/lib/libcryptoki-bridge.so</code>. Be sure to read the documentaion on how to use the interfaces.</li> </ul>"},{"location":"components/","title":"Overview","text":"<ul> <li> <p> Bridge Controller</p> <p>Bridge Controller is a GUI Application for interface management</p> <p> Learn more</p> </li> <li> <p> Cryptoki Bridge</p> <p>Cryptoki Bridge is a minimal PKCS#11 library implementation</p> <p> Learn more</p> </li> <li> <p>FIDO Bridge</p> <p>FIDO Bridge emulates FIDO2 token</p> <p> Learn more</p> </li> <li> <p> Nostr Bridge</p> <p>Nostr Bridge is a browser extension that allows Nostr event signing in a secure way through the use of threshold cryptography.</p> <p> Learn More</p> </li> <li> <p>Web eID Bridge</p> <p>Web eID Bridge is a virtual smart card emulation of a Web eID compatible applet</p> <p> Learn More</p> </li> </ul>"},{"location":"components/bridge-controller/","title":"Bridge Controller","text":"<p>Bridge Controller is the central application that provides means to customize and configure other services (emulated interfaces), using a GUI.</p>"},{"location":"components/bridge-controller/development/","title":"Development","text":"<p>The repository contains a prepared devcontainer environment that can be used for a simple and secure development setup. Refer to the provided tutorial on how to use it.</p> <p>Warning</p> <p>Please, note, this setup has some limitations. For example, you can upload files only from the <code>devcontainer-shared-files</code> directory that is located in the repo root and can be accessed from within the container at <code>/home/dev/shared-files</code> (can be changed in devcontainer.json under mounts.</p>"},{"location":"components/bridge-controller/development/#build-requirements","title":"Build Requirements","text":"<ul> <li>tauri prerequisites</li> <li>npm, Node.js</li> <li>rust</li> <li>protocol buffer compiler</li> </ul> <p>Info</p> <p>All build requirements are already installed in the provided devcontainer environment</p>"},{"location":"components/bridge-controller/development/#development-build","title":"Development Build","text":"<ul> <li> <p>Launch a development server. The setup watches all files and reflects the changes on the fly</p> <pre><code>npm run tauri dev\n</code></pre> </li> </ul>"},{"location":"components/bridge-controller/development/#production-build","title":"Production Build","text":"<ul> <li> <p>Create a production build</p> <pre><code>npm run tauri build\n</code></pre> </li> </ul>"},{"location":"components/bridge-controller/installation/","title":"Installation","text":""},{"location":"components/bridge-controller/installation/#windows","title":"Windows","text":"<p>You can install the tool using either the msi or exe installer available at the releases page.</p>"},{"location":"components/bridge-controller/installation/#debian-based-distributions","title":"Debian-Based Distributions","text":"<ol> <li>Setup the MPC Bridge repository</li> <li> <p>Install the cryptoki-bridge package</p> <pre><code>sudo apt-get install bridge-controller\n</code></pre> </li> </ol>"},{"location":"components/bridge-controller/installation/#other-linux-distributions","title":"Other Linux Distributions","text":"<p>You can either directly run or install the built AppImage AppImageLauncher. The AppImage is available at the the releases page.</p>"},{"location":"components/bridge-controller/usage/","title":"Usage","text":"<p>Upon installation, the application is available in the desktop menu tray.</p>"},{"location":"components/cryptoki-bridge/","title":"Cryptoki Bridge","text":"<p>Cryptoki Bridge is an implementation of the PKCS#11 standard. It's a shared library that can be loaded into any application that supports PKCS#11. The cryptographic operations are then delegated to MeeSign threshold platform.</p>"},{"location":"components/cryptoki-bridge/development/","title":"Development","text":"<p>The repository contains a prepared devcontainer environment that can be used for a simple and secure development setup. Refer to the provided tutorial on how to use it.</p>"},{"location":"components/cryptoki-bridge/development/#build-requirements","title":"Build Requirements","text":"<ul> <li>rust</li> <li>protocol buffer compiler</li> </ul> <p>Info</p> <p>All build requirements are already installed in the provided devcontainer environment</p>"},{"location":"components/cryptoki-bridge/development/#build","title":"Build","text":"<ol> <li> <p>Update submodules</p> <pre><code>git submodule update --init --recursive\n</code></pre> </li> <li> <p>Build the library</p> <pre><code>cargo build --release\n</code></pre> </li> </ol>"},{"location":"components/cryptoki-bridge/development/#debugging","title":"Debugging","text":""},{"location":"components/cryptoki-bridge/development/#pkcs11-spy","title":"PKCS11-Spy","text":"<p>PKCS #11 Spy is a spy library that is injected between a PKCS #11 consumer (application) and a PKCS #11 producer (library). The library logs all function invocations along with the supplied arguments. Envoked calls are delegated to the PKCS #11 producer. </p>"},{"location":"components/cryptoki-bridge/development/#installation","title":"Installation","text":"<p>PKCS #11 Spy is part of the OpenSC project and is therefore distributed as part of the OpenSC release artifact. </p>"},{"location":"components/cryptoki-bridge/development/#debian-based-os","title":"Debian-Based OS","text":"<pre><code>sudo apt-get install opensc\n</code></pre>"},{"location":"components/cryptoki-bridge/development/#usage","title":"Usage","text":"<p>The spy is loaded as a regular PKCS #11 library. In addition, the following environment variables are used for customization:</p> <ul> <li>PKCS11SPY - Specifies the PKCS #11 library that should receive delegated function invocations</li> <li>PKCS11SPY_OUTPUT - Specifies log file that will contain function invocations.</li> </ul>"},{"location":"components/cryptoki-bridge/development/#example","title":"Example","text":"<pre><code>PKCS11SPY=\"/usr/lib/libcryptoki_bridge.so\" PKCS11SPY_OUTPUT=\"./cryptoki-bridge.log\" ssh -I /usr/lib/x86_64-linux-gnu/pkcs11-spy.so username@localhost\n</code></pre>"},{"location":"components/cryptoki-bridge/installation/","title":"Installation","text":""},{"location":"components/cryptoki-bridge/installation/#windows","title":"Windows","text":"<p>You can download the dll library from the releases page.</p>"},{"location":"components/cryptoki-bridge/installation/#debian-based-distributions","title":"Debian-Based Distributions","text":"<ol> <li>Setup the MPC Bridge repository</li> <li> <p>Install the cryptoki-bridge package</p> <pre><code>sudo apt-get install cryptoki-bridge\n</code></pre> </li> </ol>"},{"location":"components/cryptoki-bridge/installation/#other-linux","title":"Other Linux","text":"<p>You can download the so library from the releases page and store it to <code>/usr/lib</code>.</p>"},{"location":"components/cryptoki-bridge/usage/","title":"Usage","text":"<p>Cryptoki Bridge is a shared library that can be loaded into any application that supports PKCS#11. On Debian-based distributions, the library is installed in <code>/usr/lib/libcryptoki_bridge.so</code>.</p>"},{"location":"components/cryptoki-bridge/usage/#configuration","title":"Configuration","text":"<ol> <li>Bridge Controller</li> <li>ENV Variables<ul> <li>COMMUNICATOR_HOSTNAME - sets the meesign hostname, e.g., <code>meesign.crocs.fi.muni.cz</code> (required)</li> <li>COMMUNICATOR_CERTIFICATE_PATH - provides the library with the path to the CA certificate (required)</li> <li>GROUP_ID - sets the signing group (optional). If not set, all groups present on the communicator are available.</li> </ul> </li> </ol>"},{"location":"components/cryptoki-bridge/usage/#use-cases","title":"Use Cases","text":"<ul> <li>OpenSSH Authentication</li> </ul>"},{"location":"components/fido-bridge/","title":"FIDO Bridge","text":"<p>Fido Bridge emulates a FIDO2 token that supports both WebAuthn, and U2F. The tool itself was originally developed by Helmut Eller under the name Softfido.</p>"},{"location":"components/fido-bridge/installation/","title":"Installation","text":""},{"location":"components/fido-bridge/installation/#debian-based-distributions","title":"Debian-Based Distributions","text":"<ol> <li> <p>Install a Debian package containing the vhci-hcd kernel module suitable for your kernel version</p> <pre><code>sudo apt-get install linux-modules-extra-$(uname -r)\n</code></pre> </li> <li> <p>Set up the MPC Bridge repository (or use the release page)</p> </li> <li> <p>Install the softfido Debian package</p> <pre><code>sudo apt-get install softfido\n</code></pre> </li> <li> <p>Be sure to reboot your machine</p> </li> </ol>"},{"location":"components/fido-bridge/usage/","title":"Usage","text":""},{"location":"components/fido-bridge/usage/#use-cases","title":"Use cases","text":"<ul> <li>FIDO2 Authentication</li> </ul>"},{"location":"components/nostr-bridge/","title":"Nostr Bridge","text":"<p>Note</p> <p>Nostr Bridge is currently in the development stage and can not be used for Nostr event signing as MeeSign doesn't support a BIP-340 compatible Schnorr signature protocol yet.</p> <p>Nostr Bridge is a browser extension that facilitates storage and usage of Nostr user secret key (nsec). The extension interconnects a Nostr client and a threshold platform (MeeSign). The extension works by implementing a <code>window.nostr</code> object that is specified in NIP-07.</p> <p>Visit the Nostr event signing page for a demo.</p>"},{"location":"components/nostr-bridge/development/","title":"Development","text":"<p>Note</p> <p>The following manual assumes you are using the provided devcontainer.</p> <ol> <li> <p>Install dependencies</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Bundle the script</p> <pre><code>npm run build\n</code></pre> </li> </ol>"},{"location":"components/nostr-bridge/installation/","title":"Installation","text":"<p>The extension will be available in the Chrome store.</p>"},{"location":"components/nostr-bridge/installation/#dev-installation","title":"Dev Installation","text":"<ol> <li> <p>Install the extension</p> <ul> <li>Chrome &gt; Extensions &gt; Enable Developer mode (upper right corner) &gt; Load unpacked (top left) &gt; Select the dist folder</li> </ul> </li> <li> <p>Run the envoy proxy</p> <pre><code>docker run -d -v \"$(pwd)\"/envoy.yaml:/etc/envoy/envoy.yaml:ro --network=host --name=envoy envoyproxy/envoy:v1.22.0\n</code></pre> </li> </ol>"},{"location":"components/nostr-bridge/usage/","title":"Usage","text":""},{"location":"components/nostr-bridge/usage/#configuration","title":"Configuration","text":"<p>Currently, the extension doesn't provide any configuration means. All changes have to be made directly to the source coude.</p> <p>In the future, the bridge can be configured using Bridge Controller or via its GUI.</p>"},{"location":"components/nostr-bridge/usage/#current-configuration","title":"Current Configuration","text":"<ul> <li>group selection policy: The first FROST authentication group containing a \"nostr\" substring in its name.</li> <li>Meesign Server instance: localhost:1337</li> <li>Envoy proxy: localhost:8080</li> </ul>"},{"location":"components/nostr-bridge/usage/#use-cases","title":"Use Cases","text":"<ul> <li>Nostr event signing</li> </ul>"},{"location":"components/web-eid-bridge/","title":"Web eID Bridge","text":"<p>This bridge emulates a Web eID JavaCard applet. It can be used for authentication to Web eID enabled services.</p>"},{"location":"components/web-eid-bridge/development/","title":"Development","text":"<p>tbd</p>"},{"location":"components/web-eid-bridge/installation/","title":"Installation","text":"<p>tbd</p>"},{"location":"components/web-eid-bridge/usage/","title":"Usage","text":""},{"location":"components/web-eid-bridge/usage/#create-an-authentication-signature-using-web-eid-binary","title":"Create an authentication signature using web-eid binary","text":"<pre><code>web-eid -c authenticate '{\"challengeNonce\": \"12345678901234567890123456789012345678901234\", \"origin\": \"https://ria.ee\"}'\n</code></pre>"},{"location":"use%20cases/","title":"Use Cases","text":""},{"location":"use%20cases/fido2/","title":"FIDO2 Authentication","text":""},{"location":"use%20cases/fido2/#demonstration","title":"Demonstration","text":"<p>The following screencast demonstrates authentaction to webauthn.io using FIDO Bridge, Bridge Controller and FIDO2 standard.</p>"},{"location":"use%20cases/fido2/#minimal-requirements","title":"Minimal Requirements","text":"<ol> <li>FIDO Bridge</li> <li>Bridge Controller</li> <li>MeeSign Server</li> <li>MeeSign Clients</li> </ol>"},{"location":"use%20cases/fido2/#tutorial","title":"Tutorial","text":"<ol> <li>Launch Bridge Controller.</li> <li>Select the FIDO interface from the interface menu, and enable and configure it.</li> <li>Once the configuration is applied, the application attaches a virtual FIDO2-compatible device that is available to all applications. You can detach the device by disabling the interface in the Bridge Controller menu.</li> </ol> <p>Warning</p> <p>Bridge controller requires passwordless sudo configuration to attach the USB/IP virtual device. This will be solved in the future by writing proper udev rules.</p>"},{"location":"use%20cases/gnupg/","title":"GnuPG (GPG) Signing","text":""},{"location":"use%20cases/gnupg/#minimal-requirements","title":"Minimal Requirements","text":"<ol> <li>Cryptoki Bridge (but the whole MPC Bridge setup is recommended)</li> <li>MeeSign Server</li> <li>MeeSign Clients</li> </ol>"},{"location":"use%20cases/gnupg/#tool-support","title":"Tool Support","text":"<p>The main option for interconnecting PKCS#11 tokens with GPG is gnupg-pkcs11-scd, which unfortunatelly doesn't support ECDSA keys (GitHub Issue). There is a proprietary solution provided by DigiCert, though. Disclaimer: I haven't tested the tool</p>"},{"location":"use%20cases/nostr/","title":"Nostr","text":""},{"location":"use%20cases/nostr/#demonstration","title":"Demonstration","text":"<p>Note</p> <p>Nostr Bridge is currently in the development stage and can not be used for Nostr event signing as MeeSign doesn't support a BIP-340 compatible Schnorr signature protocol yet.</p>"},{"location":"use%20cases/nostr/#minimal-requirements","title":"Minimal Requirements","text":"<ol> <li>Nostr Bridge</li> <li>MeeSign Server</li> <li>MeeSign Clients</li> </ol>"},{"location":"use%20cases/openssh/","title":"OpenSSH Authentication","text":""},{"location":"use%20cases/openssh/#demonstration","title":"Demonstration","text":"<p>The following screencast demonstrates the usage of Cryptoki Bridge along with Bridge Controller.</p>"},{"location":"use%20cases/openssh/#minimal-requirements","title":"Minimal Requirements","text":"<ol> <li>Cryptoki Bridge (but the whole MPC Bridge setup is recommended)</li> <li>MeeSign Server</li> <li>MeeSign Clients</li> </ol> <p>Note</p> <p>While the tutorial demonstrates configuration using Bridge Controller, Cryptoki Bridge can be used independently. For alternative ways to configure the component, please, refer to this documentation.</p>"},{"location":"use%20cases/openssh/#tutorial","title":"Tutorial","text":"<p>The following tutorial assumes you have created an authentication group on the MeeSign server. If not, please follow the MeeSign Server documentation.</p> <ol> <li> <p>Get the available group public keys in the OpenSSH format.</p> <pre><code>ssh-keygen -D &lt;meesign_cryptoki_path.so&gt; -e\n</code></pre> </li> <li> <p>Select the key corresponding to your target group and store it in a file</p> <pre><code>echo 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBdg292CUPY0xjjLziR6wkHlPP0yKRF8DYjxMllkphQozXth+Eo12t5vuia8GELe3OFECEeb+Ou34yYL07I2afQ= test-auth-group' &gt; id_ecdsa.pub\n</code></pre> </li> <li> <p>Authorize logins using the acquired public key on a remote server</p> <pre><code>ssh-copy-id -f -i id_ecdsa.pub &lt;user@server&gt;\n</code></pre> </li> <li> <p>Authenticate using meesign</p> <pre><code>ssh -I &lt;meesign_cryptoki_path.so&gt; &lt;user@server&gt;\n</code></pre> </li> <li> <p>(Optional) Configure the ssh meesign entry by customizing and appending the following entry to <code>~/.ssh/config</code>.</p> <pre><code>Host &lt;entry_host_name&gt;\n    HostName &lt;hostname&gt;\n    User &lt;user&gt;\n    PKCS11Provider &lt;meesign_cryptoki_path.so&gt;\n</code></pre> </li> <li> <p>(Optional) Authenticate using the meesign ssh entry</p> <pre><code>ssh &lt;entry_host_name&gt; # e.g., ssh my_server_via_meesign\n</code></pre> </li> <li> <p>Alternatively, you can make your SSH agent aware of the keys provided by the Cryptoki lib using the following command. Subsequently, you should be able to ssh as with regular keys (DISCLAIMER: I haven't tested this one yet, TODO).</p> <pre><code>ssh-add -s &lt;meesign_cryptoki_path.so&gt;\n# to remove the provider, use ssh-add -e &lt;meesign_cryptoki_path.so&gt;\n</code></pre> </li> </ol>"}]}